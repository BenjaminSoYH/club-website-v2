import { ISponsor } from '../interfaces/ISponsor';
import { supabase } from './client';
import { DBSponsor } from '../interfaces/DBTypes';
import { mapDBSponsorToISponsor } from '../interfaces/mapping';

export const sponsorService = {
  getAllSponsors: async (): Promise<ISponsor[]> => {
    const { data, error } = await supabase
        .from('Sponsors')
        .select('*')
        .returns<DBSponsor[]>();

    if (error) {
      throw new Error(error.message);
    }
    if (!data) {
      return [];
    }

    return data.map(mapDBSponsorToISponsor);
  },

  getSponsorById: async (id: bigint): Promise<ISponsor> => {
    const { data, error } = await supabase
      .from('Sponsors')
      .select('*')
      .eq('sponsorId', Number(id))
      .returns<DBSponsor>()
      .single();

      if (error) {
        throw new Error(error.message);
      }

      if (!data) {
        throw new Error('Sponsor not found');
      }

      return mapDBSponsorToISponsor(data);
  },

  // we omit the sponsorId and createdAt fields because they are auto-generated by supabase
  createSponsor: async (_sponsor: Omit<ISponsor, 'sponsorId' | 'createdAt'>): Promise<ISponsor> => {
    throw new Error('Not implemented');
  },

  updateSponsor: async (_id: bigint, _sponsor: Partial<ISponsor>): Promise<ISponsor> => {
    throw new Error('Not implemented'); 
  },

  deleteSponsor: async (_id: bigint): Promise<void> => {
    throw new Error('Not implemented');
  }
};